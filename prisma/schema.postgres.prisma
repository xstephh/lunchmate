// prisma/schema.postgres.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Legacy enums (kept for backfill) =====
enum CuisineEnum {
  JAPANESE
  HONG_KONG
  WESTERN
  HEALTHY
  CHINESE
  KOREAN
  THAI
  VIETNAMESE
  INDIAN
  MALAYSIAN
  ITALIAN
  OTHER
}

enum Source {
  manual
  google
  mock
}

enum PlacesProvider {
  google
  osm
  mock
}

// ===== Core models =====
model Restaurant {
  id                  String   @id @default(cuid())
  name                String
  address             String
  lat                 Float?
  lng                 Float?
  priceLevel          Int?
  source              Source   @default(manual)
  placeId             String?  @unique
  averagePublicRating Float?

  // Legacy column (kept for backfill / compatibility; to be dropped in Step 5)
  cuisine             CuisineEnum?

  // Relations
  visits    Visit[]
  cuisines  RestaurantCuisine[]
  tags      RestaurantTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([source])
  @@index([placeId])
}

model Visit {
  id           String     @id @default(cuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  rating       Int
  notes        String?
  createdAt    DateTime   @default(now())

  @@index([restaurantId, createdAt])
}

model Tag {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  restaurants RestaurantTag[]

  @@index([name])
}

model Cuisine {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  restaurants RestaurantCuisine[]

  @@index([name])
}

model RestaurantTag {
  restaurantId String
  tagId        String
  createdAt    DateTime @default(now())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([restaurantId, tagId])
  @@index([tagId])
}

model RestaurantCuisine {
  restaurantId String
  cuisineId    String
  createdAt    DateTime @default(now())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  cuisine    Cuisine    @relation(fields: [cuisineId], references: [id], onDelete: Cascade)

  @@id([restaurantId, cuisineId])
  @@index([cuisineId])
}

// ===== Provider infra =====
model PlacesCache {
  id        String   @id @default(cuid())
  provider  String
  key       String   @unique
  payload   Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider, expiresAt])
}

model ProviderUsage {
  id        String          @id @default(cuid())
  provider  PlacesProvider
  dateKey   String   // "YYYY-MM-DD"
  count     Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([provider, dateKey])
}